package org.fpeterek.pa.im.graph


class Node(val id: Int, private val _links: MutableList<Link> = mutableListOf()) {

    var frozen = false
        set(value) {
            if (field) {
                throw RuntimeException("Mutation of frozen node is forbidden")
            }
            field = value
        }

    val links: List<Link>
        get() = _links

    val mutableLinks: MutableList<Link>
        get() = if (frozen) {
            throw RuntimeException("Access to mutable attribute of a frozen node is forbidden")
        } else {
            _links
        }

    fun freeze() {
        frozen = true
    }

    // We can perform the following simplification so long
    // as we accept the only possible input is a graph
    // generated by the built-in graph generator (or
    // an equivalent generator generating correct output)
    override fun hashCode() = id.hashCode()

    override fun equals(other: Any?) = when (other) {
        is Node -> id == other.id
        else -> false
    }

}
